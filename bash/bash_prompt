# Basic BASH prompt. Used to have the git branch and a status indicator, but with
# the upgrade to Mavericks it stopped functioning correctly. So I pulled it out.
# Maybe one day it'll go back in.

BLACK=`tput setaf 000`
RED=`tput setaf 001`
GREEN=`tput setaf 002`
YELLOW=`tput setaf 003`
BLUE=`tput setaf 004`
MAGENTA=`tput setaf 005`
CYAN=`tput setaf 006`
WHITE=`tput setaf 007`

DIM=`tput dim`
BOLD=`tput bold`
RESET=`tput sgr0`

function get_branch() {
if [ $(git branch 2> /dev/null | grep \* | sed 's/\* //') ]
then
  BRANCH=$(git branch 2> /dev/null | grep \* | sed 's/\* //')
  echo "on$BLUE" $BRANCH
fi
}

function get_status() {
if [ $(git branch 2> /dev/null | grep \* | sed 's/\* //') ]
then
[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "$RED*"
fi
}

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+=$GREEN'[+]';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+=$RED'[!]';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+=$YELLOW'[?]';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+=$CYAN'[$]';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" ${s}";

		echo -e "on $BLUE${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

export PS1=$'$RESET\n'"\[$YELLOW\]\u \[$WHITE\]in\[$CYAN\] \w \[$WHITE\]\$(prompt_git)\[$MAGENTA\]"$'\n> $WHITE'