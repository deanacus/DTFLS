# Sexy Bash Prompt, inspired by gf3: https://github.com/gf3/dotfiles/blob/master/.bash_prompt
# Hacked (probably poorly) to match my own tastes

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="\[$WHITE\]on \\[$ORANGE\]$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s="[$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

CYAN=$(tput setaf 6)
MAGENTA=$(tput setaf 5)
GREEN=$(tput setaf 2)
ORANGE=$(tput setaf 172)
WHITE=$(tput setaf 7)
RED=$(tput setaf 1)

 PS1="\n\[$CYAN\]\u \[$WHITE\]at \[$MAGENTA\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\] $(prompt_git)\[$WHITE\]\n> "
