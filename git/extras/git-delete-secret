#!/usr/bin/env bash

## This is a fucking dangerout command. I don't fully understand it,
# which is why it can't be called without the --force flag. If called
# without the force flag, it will print a message to the terminal informing
# the user of this fact, along with instructing them to create a backup

ohFuckICommittedASecret() {
  git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all
  echo "$1" >> .gitignore
  git push origin --force --all --tags
  git for-each-ref --format="delete %(refname)" refs/original | git update-ref --stdin
  git reflog expire --expire=now --all
  git gc --prune=now
}

BORDER= "================================================================================"
WARNING_TITLE="                                    WARNING                                     "
WARNING_PARA_1="You have tried to run a dangerous, destructive operation that may result is\nsignificant issues including data loss within the repository - both locally and\non all remotes."
WARNING_PARA_2="Before you run this command, ensure you have created a fresh backup, and and\nhave read and understood\nhttps://help.github.com/articles/removing-sensitive-data-from-a-repository/\nTo complete the running of this command, re-invoke it with the \"--force\" flag."

printWarning() {
  printf '\033[2J\033[H'
  echo $BORDER
  echo $WARNING_TITLE
  echo $BORDER
  echo ""
  echo $WARNING_PARA_1
  echo ""
  echo $WARNING_PARA_2
}


case $@ in
    --force)
      ohFuckICommittedASecret "$@"
  *)
    printWarning