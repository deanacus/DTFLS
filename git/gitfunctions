backup() {}


  # Ours & Theirs - easy merging when you know which files you want
  #
  # Sometimes during a merge you want to take a file from one side wholesale.
  #
  # The following aliases expose the ours and theirs commands which let you
  # pick a file(s) from the current branch or the merged branch respectively.
  #
  #   * ours: checkout our version of a file and add it
  #   * theirs: checkout their version of a file and add it
  #
  # N.b. the function is there as hack to get $@ doing
  # what you would expect it to as a shell user.
  #
  ours   = !"f() { git checkout --ours   $@ && git add $@; }; f"
  theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

  # Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
  # This enables a quick way to add all new and modified files to the index,
  # while cleaning the index from the files removed from the working tree;
  # this cleaning will facilitate a rebase, because there won't be any conflict
  # due to an "unclean" working directory (not in sync with the index).
  # The unwip will restore the deleted files to the working tree.
  wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip"
  unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

  # Assume
  #
  # Sometimes we want to change a file in a repo, but never check in your edits.
  # We can't use .gitignore because the file is tracked. We use update-index.
  #
  # If you interact with big corporate projects, such as projects in Subversion,
  # then you might run into the need to ignore certain files which are under
  # Subversion control, yet you need to modify them but not commit.
  # The assume-unchanged flag comes to the rescue.
  #
  # Suppose we want to edit passwords.txt and for god's sake never check it in:
  #
  #     $ git status
  #     modified passwords.txt
  #     modified foo.txt
  #
  #     $ git assume passwords.txt
  #     $ git status
  #     modified foo.txt
  #
  #     $ git assumed
  #     passwords.txt
  #
  #     $ git unassume passwords.txt
  #     $ git status
  #     modified passwords.txt
  #     modified foo.txt
  #
  # Thanks to http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  # Thanks to http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/

  assume   = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
  unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumed  = !"git ls-files -v | grep ^h | cut -c 3-"

  # Delete all branches that have already been merged into the master branch.
  master-cleanse = !git master-cleanse-local; git master-cleanse-remote

  # Delete all local branches that have been merged into the local master branch.
  master-cleanse-local = "!git checkout master && git branch --merged | xargs git branch --delete"

    # Publish the current branch by pushing it to the remote "origin",
  # and setting the current branch to track the upstream branch.
  publish = !"git push --set-upstream origin $(git branch-name)"

  # Unpublish the current branch by deleting the
  # remote version of the current branch.
  unpublish = !"git push origin :$(git branch-name)"


    # Delete a branch name, then create the same branch name based on master -
  # useful if you have, for example, a development branch and master branch
  # and they go out of sync, and you want to nuke the development branch.
  #
  # Calls the `publish` and `unpublish` aliases.
  #
  reincarnate = !"f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

  # Friendly wording is easier to remember.
  # Thanks to http://gggritso.com/human-git-aliases
  branches = branch -a
  tags = tag -n1 --list
  stashes = stash list

  # Get the current branch name
  branch-name = rev-parse --abbrev-ref HEAD

  ### MAINTENANCE ALIASES ###

  # pruner: prune everything that is unreachable now.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # This is useful for removing unreachable objects from all places.
  #
  # By [CodeGnome](http://www.codegnome.com/)
  #
  pruner = !"git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all"
  # repacker: repack a repo the way Linus recommends.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # It does the equivalent of "git gc --aggressive"
  # but done *properly*,  which is to do something like:
  #
  #     git repack -a -d --depth=250 --window=250
  #
  # The depth setting is about how deep the delta chains can be;
  # make them longer for old history - it's worth the space overhead.
  #
  # The window setting is about how big an object window we want
  # each delta candidate to scan.
  #
  # And here, you might well want to add the "-f" flag (which is
  # the "drop all old deltas", since you now are actually trying
  # to make sure that this one actually finds good candidates.
  #
  # And then it's going to take forever and a day (ie a "do it overnight"
  # thing). But the end result is that everybody downstream from that
  # repository will get much better packs, without having to spend any effort
  # on it themselves.
  #
  # http://metalinguist.wordpress.com/2007/12/06/the-woes-of-git-gc-aggressive-and-how-git-deltas-work/
  #
  # We also add the --window-memory limit of 1 gig, which helps protect
  # us from a window that has very large objects such as binary blobs.
  #
  repacker = repack -a -d -f --depth=300 --window=300 --window-memory=1g

  # Do everything we can to optimize the repository.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # Currently, this command simply calls `git pruner` and `git repacker`.
  # There's a step that may be unnecessarying, calling `git prune-pack`.
  #
  optimize = !git pruner; git repacker; git prune-packed

  ### ADVANCED ALIASES ###

  # Search for a given string in all patches and print commit messages.
  # Posted by Mikko Rantalainen on StackOverflow.
  #
  # Example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  #
  # Example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  #
  # Example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = !"f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

    #########################################################################

  ##
  # Git alias settings suitable for topic branches.
  #
  # These aliases are simple starting points for a simple topic flow.
  # Lots of people have lots of ideas about how to do various git flows.
  #
  # Some people like to use a topic branch for a new feature, or a
  # hotfix patch, or refactoring work, or some spike research, etc.
  #
  # Start work on a new topic branch, which creates your branch:
  #
  #     $ git topic-start add-feature-foo
  #
  # Do some work then synchronize your changes, which integrates your branch:
  #
  #     $ git topic-sync
  #
  # Stop work on a topic branch, which deletes your branch:
  #
  #     $ git topic-stop
  #
  # If you want to move your branch a.k.a. rename it:
  #
  #     $ git topic-rename
  #
  # Ideas for your own alias customizations:
  #
  #   * Notify your team, such as by sending an email, posting to chat, etc.
  #
  #   * Trigger testing of the new topic branch to ensure all tests succeed.
  #
  #   * Update your project management software with the new topic name.
  #
  # Customize these aliases as you like for your own workflow.
  ##

  ##
  # Provide the name of the topic base branch, such as "main".
  #
  # When we create a new topic branch, we base it on the topic base branch.
  # Many projects use the topic base branch name "main". Some projects use
  # use "trunk", "develop", "deploy", "integrate", "release", "green", etc.
  #
  # The topic base branch name is "main" by default. You can customize
  # the name for your local repo, or your own user's global configuration,
  # or your system configuration, by using `git config` such as:
  #
  #    $ git config --local gitalias.topic.base.branch.name "foo"
  #
  #    $ git config --global gitalias.topic.base.branch.name "foo"
  #
  #    $ git config --system gitalias.topic.base.branch.name "foo"
  #
  # Thanks to https://github.com/gwjo
  ##

  topic-base-branch-name = "!f(){ \
    git config --get gitalias.topic.base.branch.name || printf '%s\n' main; \
  };f"

  ##
  # Start a topic branch.
  #
  # Example:
  #
  #     git topic-start add-feature-foo
  #
  # We use this alias to begin work on a new feature,
  # new task, new fix, new refactor, new optimization, etc.
  #
  # Customize this alias as you like for your own workflow.
  #
  # Our workflow does these steps:
  #
  #   1. Update the base branch.
  #   2. Create a new branch with your topic name, based on the base branch.
  #   3. Push the topic branch, so our team members can see the new branch.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation makes your branch visible to collaborators.
  #
  # Many teams share branches before they are fully ready, to help
  # the team provide feedback on the work-in-progress, and also to
  # run any automatic tests to verify the branch runs successfully.
  ##

  topic-start = "!f(){ \
    topic_branch=\"$1\"; \
    base_branch=$(git topic-base-branch-name); \
    git checkout \"$base_branch\"; git pull; \
    git checkout -b \"$topic_branch\" \"$base_branch\"; \
    git push --set-upstream origin \"$topic_branch\"; \
  };f"

  ##
  # Stop a topic branch; this must be the current branch.
  #
  # Example:
  #
  #     git topic-stop
  #
  # We use this alias to complete work on a new feature,
  # new task, new fix, new refactor, new optimization, etc.
  #
  # Customize this alias as you like for your own workflow.
  #
  # Our workflow does these steps:
  #
  #   1. Push the topic branch.
  #   2. Delete the topic branch locally.
  #   3. Delete the topic branch remotely.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation deletes your branch for the site.
  #
  # Many teams choose to delete topic branches when they are finished,
  # to keep the repositories clean and with a smaller number of branches.
  #
  # If git says "unable to push to unqualified destination" then it means
  # that the remote branch doesn't exist, so git is unable to delete it.
  # That's fine; it means someone else has already deleted the branch.
  # To synchronize your branch list, use "git fetch --prune".
  ##

  topic-stop = "!f(){ \
    topic_branch=$(git branch-name); \
    base_branch=$(git topic-base-branch-name); \
    if [ \"$topic_branch\" = \"$base_branch\" ]; then \
      printf \"You are asking to do git topic-stop,\n\"; \
      printf \"but you are not currently on a topic branch;\n\"; \
      printf \"you are on the base branch: $base_branch.\n\"; \
      printf \"Please checkout the topic branch that you want,\n\"; \
      printf \"then retry the git topic delete command.\n\"; \
    else \
      git push; \
      git checkout \"$base_branch\"; \
      git branch --delete \"$topic_branch\"; \
      git push origin \":$topic_branch\"; \
    fi; \
  };f"

  ##
  # Update the current topic branch by synchronizing changes.
  #
  # Example:
  #
  #     git topic-sync
  #
  # This implementation does these:
  #
  #   1. Pull any changes.
  #   2. Push any changes.
  #
  # If you use any kind of testing framework, or test driven development,
  # then it can be wise to test your topic immediately after running this,
  # to ensure that any available updates are successfully integrated.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-sync = "!f(){ \
    topic_branch=$(git branch-name); \
    base_branch=$(git topic-base-branch-name); \
    if [ \"$topic_branch\" = \"$base_branch\" ]; then \
      printf \"You are asking to do git topic-sync,\n\"; \
      printf \"but you are not currently on a topic branch;\n\"; \
      printf \"you are on the base branch: $base_branch.\n\"; \
      printf \"Please checkout the topic branch that you want,\n\"; \
      printf \"then retry the git topic delete command.\n\"; \
    else \
      git pull; \
      git push; \
    fi; \
  };f"

  ##
  # Move the current topic branch, a.k.a. rename it.
  #
  # Example:
  #
  #     git topic-move hello
  #
  # This implementation does these:
  #
  #   1. Move the local branch.
  #   2. Move the remote branch by pushing to origin.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-move = "!f(){ \
    new_branch=\"$1\"; \
    old_branch=$(git branch-name); \
    git branch --move \"$old_branch\" \"$new_branch\"; \
    git push origin \":$old_branch\" \"$new_branch\"; \
  };f"